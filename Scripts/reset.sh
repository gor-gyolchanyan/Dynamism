#!/bin/sh

#
# Brings the working copy of the repository to a clean and usable state without discarding uncommited changes.
#

# --------------------------------------------------------------------------------

# Store the working directory from which this script was launched.
original_working_directory="$(pwd)"

# If any command terminates with a non-zero exit code, this script terminates as well.
set -e

# The function to be called before this script terminates.
function on_exit {
	# Restore the working directory from which this script was launched.
	cd "${original_working_directory}"
}
trap on_exit EXIT

# --------------------------------------------------------------------------------

# The working directory to and store the path of the repository.
# Computing this is achieved by assuming that this script is located at a specific path relative to the repository path.
cd "$(dirname "$(dirname "${0}")")"
repository_path="$(pwd)"

# The name of the repository.
# Computing this is achieved by taking the base name of the repository path.
repository_name="$(basename "${repository_path}")"

# The path to the Xcode workspace.
xcode_workspace_path="${repository_name}.xcworkspace"

# The name of the playground target.
playground_target_name="${repository_name}Playground"

# The path of the playground target.
playground_target_path="Sources/${playground_target_name}"

# --------------------------------------------------------------------------------

# Joins all parameters after the first one using the character specified by the first parameter.
join_by() {
	local IFS="$1"
	shift
	echo "$*"
}

# Creates an empty swift file with the specified path.
create_swift_file() {
	local path="${1}"
	rm -f "${path}"
	mkdir -p "$(dirname ${path})"
	echo '// ' >> "${path}"
	cat 'LICENCE.txt' | xargs -L "\n" -L1 echo "// " > "${path}"
	echo '// ' >> "${path}"
	echo '' >> "${path}"
}

# Creates a `main.swift` file at the specified directory.
create_main_swift_file() {
	local path="${1}"
	create_swift_file "${path}/main.swift"
	echo 'import Dynamism' >> "${path}/main.swift"
	echo '' >> "${path}/main.swift"
}

# --------------------------------------------------------------------------------

# Close the Xcode workspace if it is open.
osascript <<EOF
tell application "Xcode"
	set saughtDocumentPath to (POSIX file "${repository_path}/${xcode_workspace_path}/")
	repeat with eachDocument in workspace documents
		set eachDocumentPath to (file of eachDocument)
		if eachDocumentPath is saughtDocumentPath then
			close eachDocument saving no
			exit repeat
		end if
	end repeat
end tell
EOF

# Remove all ignored files from the working copy of the repository.
git clean -fdXq

# Create the `.gitignore` file.
# This is achieved by using the `gitignore.io` public API to download a standard gitignore from the keywords in the `gitignore-keywords` file, prepending the contents of `gitignore-prefix` and appending the contents of `gitignore-suffix`.
rm -f .gitignore
echo '# ATTENTION: Do not edit this file directly. Instead, edit the `gitignore-prefix` and `gitignore-suffix` files.' >> .gitignore
echo '' >> .gitignore
cat gitignore-prefix >> .gitignore
curl -s "https://www.gitignore.io/api/$(cat 'gitignore-keywords' | paste -sd ',' -)" >> .gitignore
cat gitignore-suffix >> .gitignore

# Creates the `main.swift` file of the playground target.
create_main_swift_file "${playground_target_path}"

# Generate the Xcode project that is referenced from the Xcode workspace.
swift package generate-xcodeproj --skip-extra-files --enable-code-coverage > /dev/null

# Open the Xcode workspace.
osascript <<EOF
tell application "Finder" to open (POSIX file "${repository_path}/${xcode_workspace_path}/")
EOF
